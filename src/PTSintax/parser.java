
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 02 14:48:57 CST 2012
//----------------------------------------------------

package PTSintax;

import java_cup.runtime.*;
import TablaSimbolos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 02 14:48:57 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\004\011\000\002\002\004\000\002\007" +
    "\003\000\002\007\004\000\002\007\004\000\002\007\003" +
    "\000\002\012\004\000\002\012\007\000\002\012\012\000" +
    "\002\012\007\000\002\012\005\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\011\000\002\012\011\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\012\011\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\012\007\000\002\016\006\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\005\000\002\015\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\005\003\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\062\005\001\002\000\004\002\u010b\001" +
    "\002\000\004\056\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\004\042\011\001\002\000" +
    "\022\035\023\037\014\046\012\047\022\050\027\052\020" +
    "\064\013\066\024\001\002\000\004\066\uffd2\001\002\000" +
    "\004\066\uffcf\001\002\000\010\033\263\034\262\066\024" +
    "\001\002\000\004\004\261\001\002\000\024\035\uffff\037" +
    "\uffff\043\uffff\046\uffff\047\uffff\050\uffff\052\uffff\064\uffff" +
    "\066\uffff\001\002\000\024\035\ufffc\037\ufffc\043\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\052\ufffc\064\ufffc\066\ufffc\001\002" +
    "\000\004\006\247\001\002\000\004\021\210\001\002\000" +
    "\004\066\uffd0\001\002\000\016\030\054\032\056\033\060" +
    "\034\055\066\024\067\062\001\002\000\046\004\uffce\007" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\040\uffce\044" +
    "\uffce\045\uffce\055\uffce\060\uffce\001\002\000\024\035\023" +
    "\037\014\043\053\046\012\047\022\050\027\052\020\064" +
    "\013\066\024\001\002\000\004\066\024\001\002\000\004" +
    "\066\uffd1\001\002\000\006\004\031\021\032\001\002\000" +
    "\024\035\ufff7\037\ufff7\043\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\052\ufff7\064\ufff7\066\ufff7\001\002\000\014\032\035\033" +
    "\036\034\033\057\034\067\040\001\002\000\004\004\050" +
    "\001\002\000\004\006\045\001\002\000\004\004\044\001" +
    "\002\000\004\004\043\001\002\000\004\004\042\001\002" +
    "\000\004\004\041\001\002\000\024\035\ufff4\037\ufff4\043" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\064\ufff4\066\ufff4" +
    "\001\002\000\024\035\uffde\037\uffde\043\uffde\046\uffde\047" +
    "\uffde\050\uffde\052\uffde\064\uffde\066\uffde\001\002\000\024" +
    "\035\ufff6\037\ufff6\043\ufff6\046\ufff6\047\ufff6\050\ufff6\052" +
    "\ufff6\064\ufff6\066\ufff6\001\002\000\024\035\ufff3\037\ufff3" +
    "\043\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\064\ufff3\066" +
    "\ufff3\001\002\000\004\067\046\001\002\000\004\007\047" +
    "\001\002\000\004\004\uffdd\001\002\000\024\035\ufff5\037" +
    "\ufff5\043\ufff5\046\ufff5\047\ufff5\050\ufff5\052\ufff5\064\ufff5" +
    "\066\ufff5\001\002\000\024\035\ufffd\037\ufffd\043\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\052\ufffd\064\ufffd\066\ufffd\001\002" +
    "\000\024\035\ufffe\037\ufffe\043\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\052\ufffe\064\ufffe\066\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\032\207\001\002\000\016\022\166\023" +
    "\171\024\172\025\165\026\170\027\167\001\002\000\012" +
    "\026\160\027\157\040\uff9a\060\uff9a\001\002\000\004\060" +
    "\147\001\002\000\016\022\117\023\123\024\124\025\120" +
    "\026\122\027\121\001\002\000\016\022\071\023\075\024" +
    "\076\025\073\026\074\027\072\001\002\000\006\026\064" +
    "\027\063\001\002\000\006\066\024\067\070\001\002\000" +
    "\006\066\024\067\066\001\002\000\006\040\uff96\060\uff96" +
    "\001\002\000\006\040\uffb4\060\uffb4\001\002\000\006\040" +
    "\uff95\060\uff95\001\002\000\006\040\uffb3\060\uffb3\001\002" +
    "\000\006\033\115\066\024\001\002\000\012\032\111\033" +
    "\113\066\024\067\114\001\002\000\006\033\110\066\024" +
    "\001\002\000\012\032\103\033\104\066\024\067\106\001" +
    "\002\000\006\033\101\066\024\001\002\000\006\033\077" +
    "\066\024\001\002\000\006\040\uffb7\060\uffb7\001\002\000" +
    "\006\040\uffc1\060\uffc1\001\002\000\006\040\uffb9\060\uffb9" +
    "\001\002\000\006\040\uffc3\060\uffc3\001\002\000\006\040" +
    "\uffc0\060\uffc0\001\002\000\006\040\uffbc\060\uffbc\001\002" +
    "\000\006\040\uffc6\060\uffc6\001\002\000\006\040\uffbe\060" +
    "\uffbe\001\002\000\006\040\uffc2\060\uffc2\001\002\000\006" +
    "\040\uffb8\060\uffb8\001\002\000\006\040\uffbf\060\uffbf\001" +
    "\002\000\006\040\uffc5\060\uffc5\001\002\000\006\040\uffbb" +
    "\060\uffbb\001\002\000\006\040\uffbd\060\uffbd\001\002\000" +
    "\006\040\uffba\060\uffba\001\002\000\006\040\uffc4\060\uffc4" +
    "\001\002\000\010\033\146\034\144\066\024\001\002\000" +
    "\010\033\143\034\141\066\024\001\002\000\010\033\140" +
    "\034\136\066\024\001\002\000\010\033\135\034\133\066" +
    "\024\001\002\000\010\033\131\034\130\066\024\001\002" +
    "\000\010\033\127\034\125\066\024\001\002\000\006\040" +
    "\uffa1\060\uffa1\001\002\000\006\040\uff8f\060\uff8f\001\002" +
    "\000\006\040\uffad\060\uffad\001\002\000\006\040\uffa3\060" +
    "\uffa3\001\002\000\006\040\uffaf\060\uffaf\001\002\000\006" +
    "\040\uff91\060\uff91\001\002\000\006\040\uffa6\060\uffa6\001" +
    "\002\000\006\040\uff94\060\uff94\001\002\000\006\040\uffb2" +
    "\060\uffb2\001\002\000\006\040\uffa5\060\uffa5\001\002\000" +
    "\006\040\uff93\060\uff93\001\002\000\006\040\uffb1\060\uffb1" +
    "\001\002\000\006\040\uffa2\060\uffa2\001\002\000\006\040" +
    "\uff90\060\uff90\001\002\000\006\040\uffae\060\uffae\001\002" +
    "\000\006\040\uffa4\060\uffa4\001\002\000\006\040\uff92\060" +
    "\uff92\001\002\000\006\040\uffb0\060\uffb0\001\002\000\024" +
    "\035\023\037\014\042\151\046\012\047\022\050\027\052" +
    "\020\064\013\066\024\001\002\000\024\035\023\037\014" +
    "\043\153\046\012\047\022\050\027\052\020\064\013\066" +
    "\024\001\002\000\004\043\152\001\002\000\024\035\ufff8" +
    "\037\ufff8\043\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8\064" +
    "\ufff8\066\ufff8\001\002\000\026\035\ufffa\036\154\037\ufffa" +
    "\043\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa\064\ufffa\066" +
    "\ufffa\001\002\000\022\035\023\037\014\046\012\047\022" +
    "\050\027\052\020\064\013\066\024\001\002\000\024\035" +
    "\023\037\014\043\156\046\012\047\022\050\027\052\020" +
    "\064\013\066\024\001\002\000\024\035\ufff9\037\ufff9\043" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\052\ufff9\064\ufff9\066\ufff9" +
    "\001\002\000\006\032\163\066\024\001\002\000\006\032" +
    "\161\066\024\001\002\000\006\040\uffb6\060\uffb6\001\002" +
    "\000\006\040\uff98\060\uff98\001\002\000\006\040\uffb5\060" +
    "\uffb5\001\002\000\006\040\uff97\060\uff97\001\002\000\006" +
    "\033\206\034\205\001\002\000\006\033\204\034\203\001" +
    "\002\000\006\033\202\034\201\001\002\000\006\033\200" +
    "\034\177\001\002\000\006\033\176\034\175\001\002\000" +
    "\006\033\174\034\173\001\002\000\006\040\uffa7\060\uffa7" +
    "\001\002\000\006\040\uff9b\060\uff9b\001\002\000\006\040" +
    "\uffa9\060\uffa9\001\002\000\006\040\uff9d\060\uff9d\001\002" +
    "\000\006\040\uffac\060\uffac\001\002\000\006\040\uffa0\060" +
    "\uffa0\001\002\000\006\040\uffab\060\uffab\001\002\000\006" +
    "\040\uff9f\060\uff9f\001\002\000\006\040\uffaa\060\uffaa\001" +
    "\002\000\006\040\uff9e\060\uff9e\001\002\000\006\040\uffa8" +
    "\060\uffa8\001\002\000\006\040\uff9c\060\uff9c\001\002\000" +
    "\006\040\uff99\060\uff99\001\002\000\016\006\215\032\212" +
    "\033\220\034\222\066\024\067\211\001\002\000\006\004" +
    "\uffca\055\244\001\002\000\004\004\uffc9\001\002\000\016" +
    "\004\uffd8\007\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\001" +
    "\002\000\016\004\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\055\241\001\002\000\012\006\215\033\220\034\222\066" +
    "\024\001\002\000\010\004\uffc8\013\233\014\234\001\002" +
    "\000\016\004\uffd3\007\uffd3\013\uffd3\014\uffd3\015\226\016" +
    "\227\001\002\000\016\004\uffdb\007\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\001\002\000\006\004\uffc7\055\223\001" +
    "\002\000\016\004\uffda\007\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\001\002\000\006\066\024\067\225\001\002\000" +
    "\010\004\uff89\007\uff89\055\uff89\001\002\000\010\004\uff8a" +
    "\007\uff8a\055\uff8a\001\002\000\012\006\215\033\220\034" +
    "\222\066\024\001\002\000\012\006\215\033\220\034\222" +
    "\066\024\001\002\000\016\004\uffdc\007\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\001\002\000\016\004\uffd6\007\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\001\002\000\016\004" +
    "\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\001\002" +
    "\000\012\006\215\033\220\034\222\066\024\001\002\000" +
    "\012\006\215\033\220\034\222\066\024\001\002\000\016" +
    "\004\uffd4\007\uffd4\013\uffd4\014\uffd4\015\226\016\227\001" +
    "\002\000\016\004\uffd5\007\uffd5\013\uffd5\014\uffd5\015\226" +
    "\016\227\001\002\000\010\007\240\013\233\014\234\001" +
    "\002\000\016\004\uffd9\007\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\001\002\000\006\066\024\067\243\001\002\000" +
    "\010\004\uff8e\007\uff8e\055\uff8e\001\002\000\010\004\uff8b" +
    "\007\uff8b\055\uff8b\001\002\000\006\066\024\067\246\001" +
    "\002\000\010\004\uff8c\007\uff8c\055\uff8c\001\002\000\010" +
    "\004\uff8d\007\uff8d\055\uff8d\001\002\000\006\066\024\067" +
    "\252\001\002\000\006\007\257\055\241\001\002\000\006" +
    "\007\255\055\223\001\002\000\006\007\253\055\244\001" +
    "\002\000\004\004\254\001\002\000\024\035\uffcd\037\uffcd" +
    "\043\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\064\uffcd\066" +
    "\uffcd\001\002\000\004\004\256\001\002\000\024\035\uffcb" +
    "\037\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\064" +
    "\uffcb\066\uffcb\001\002\000\004\004\260\001\002\000\024" +
    "\035\uffcc\037\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc\052" +
    "\uffcc\064\uffcc\066\uffcc\001\002\000\024\035\ufffb\037\ufffb" +
    "\043\ufffb\046\ufffb\047\ufffb\050\ufffb\052\ufffb\064\ufffb\066" +
    "\ufffb\001\002\000\006\044\361\045\362\001\002\000\006" +
    "\044\327\045\330\001\002\000\006\044\265\045\266\001" +
    "\002\000\016\030\054\032\056\033\311\034\307\066\024" +
    "\067\062\001\002\000\016\030\054\032\056\033\270\034" +
    "\267\066\024\067\062\001\002\000\020\022\166\023\171" +
    "\024\172\025\165\026\170\027\167\040\304\001\002\000" +
    "\020\022\117\023\123\024\124\025\120\026\122\027\121" +
    "\040\301\001\002\000\004\040\276\001\002\000\020\022" +
    "\071\023\075\024\076\025\073\026\074\027\072\040\273" +
    "\001\002\000\022\035\023\037\014\046\012\047\022\050" +
    "\027\052\020\064\013\066\024\001\002\000\024\035\023" +
    "\037\014\043\275\046\012\047\022\050\027\052\020\064" +
    "\013\066\024\001\002\000\024\035\uffeb\037\uffeb\043\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\052\uffeb\064\uffeb\066\uffeb\001" +
    "\002\000\022\035\023\037\014\046\012\047\022\050\027" +
    "\052\020\064\013\066\024\001\002\000\024\035\023\037" +
    "\014\043\300\046\012\047\022\050\027\052\020\064\013" +
    "\066\024\001\002\000\024\035\uffe1\037\uffe1\043\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\052\uffe1\064\uffe1\066\uffe1\001\002" +
    "\000\022\035\023\037\014\046\012\047\022\050\027\052" +
    "\020\064\013\066\024\001\002\000\024\035\023\037\014" +
    "\043\303\046\012\047\022\050\027\052\020\064\013\066" +
    "\024\001\002\000\024\035\uffea\037\uffea\043\uffea\046\uffea" +
    "\047\uffea\050\uffea\052\uffea\064\uffea\066\uffea\001\002\000" +
    "\022\035\023\037\014\046\012\047\022\050\027\052\020" +
    "\064\013\066\024\001\002\000\024\035\023\037\014\043" +
    "\306\046\012\047\022\050\027\052\020\064\013\066\024" +
    "\001\002\000\024\035\uffe9\037\uffe9\043\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\052\uffe9\064\uffe9\066\uffe9\001\002\000\020" +
    "\022\166\023\171\024\172\025\165\026\170\027\167\040" +
    "\324\001\002\000\004\040\321\001\002\000\020\022\117" +
    "\023\123\024\124\025\120\026\122\027\121\040\316\001" +
    "\002\000\020\022\071\023\075\024\076\025\073\026\074" +
    "\027\072\040\313\001\002\000\022\035\023\037\014\046" +
    "\012\047\022\050\027\052\020\064\013\066\024\001\002" +
    "\000\024\035\023\037\014\043\315\046\012\047\022\050" +
    "\027\052\020\064\013\066\024\001\002\000\024\035\ufff2" +
    "\037\ufff2\043\ufff2\046\ufff2\047\ufff2\050\ufff2\052\ufff2\064" +
    "\ufff2\066\ufff2\001\002\000\022\035\023\037\014\046\012" +
    "\047\022\050\027\052\020\064\013\066\024\001\002\000" +
    "\024\035\023\037\014\043\320\046\012\047\022\050\027" +
    "\052\020\064\013\066\024\001\002\000\024\035\ufff1\037" +
    "\ufff1\043\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\064\ufff1" +
    "\066\ufff1\001\002\000\022\035\023\037\014\046\012\047" +
    "\022\050\027\052\020\064\013\066\024\001\002\000\024" +
    "\035\023\037\014\043\323\046\012\047\022\050\027\052" +
    "\020\064\013\066\024\001\002\000\024\035\uffe4\037\uffe4" +
    "\043\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\064\uffe4\066" +
    "\uffe4\001\002\000\022\035\023\037\014\046\012\047\022" +
    "\050\027\052\020\064\013\066\024\001\002\000\024\035" +
    "\023\037\014\043\326\046\012\047\022\050\027\052\020" +
    "\064\013\066\024\001\002\000\024\035\ufff0\037\ufff0\043" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\064\ufff0\066\ufff0" +
    "\001\002\000\016\030\054\032\056\033\346\034\055\066" +
    "\024\067\062\001\002\000\016\030\054\032\056\033\332" +
    "\034\055\066\024\067\062\001\002\000\004\040\342\001" +
    "\002\000\020\022\117\023\123\024\124\025\120\026\122" +
    "\027\121\040\337\001\002\000\020\022\071\023\075\024" +
    "\076\025\073\026\074\027\072\040\334\001\002\000\022" +
    "\035\023\037\014\046\012\047\022\050\027\052\020\064" +
    "\013\066\024\001\002\000\024\035\023\037\014\043\336" +
    "\046\012\047\022\050\027\052\020\064\013\066\024\001" +
    "\002\000\024\035\uffe6\037\uffe6\043\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\052\uffe6\064\uffe6\066\uffe6\001\002\000\022\035" +
    "\023\037\014\046\012\047\022\050\027\052\020\064\013" +
    "\066\024\001\002\000\024\035\023\037\014\043\341\046" +
    "\012\047\022\050\027\052\020\064\013\066\024\001\002" +
    "\000\024\035\uffe8\037\uffe8\043\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\052\uffe8\064\uffe8\066\uffe8\001\002\000\022\035\023" +
    "\037\014\046\012\047\022\050\027\052\020\064\013\066" +
    "\024\001\002\000\024\035\023\037\014\043\344\046\012" +
    "\047\022\050\027\052\020\064\013\066\024\001\002\000" +
    "\024\035\uffe0\037\uffe0\043\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\052\uffe0\064\uffe0\066\uffe0\001\002\000\004\040\356\001" +
    "\002\000\020\022\117\023\123\024\124\025\120\026\122" +
    "\027\121\040\353\001\002\000\020\022\071\023\075\024" +
    "\076\025\073\026\074\027\072\040\350\001\002\000\022" +
    "\035\023\037\014\046\012\047\022\050\027\052\020\064" +
    "\013\066\024\001\002\000\024\035\023\037\014\043\352" +
    "\046\012\047\022\050\027\052\020\064\013\066\024\001" +
    "\002\000\024\035\uffed\037\uffed\043\uffed\046\uffed\047\uffed" +
    "\050\uffed\052\uffed\064\uffed\066\uffed\001\002\000\022\035" +
    "\023\037\014\046\012\047\022\050\027\052\020\064\013" +
    "\066\024\001\002\000\024\035\023\037\014\043\355\046" +
    "\012\047\022\050\027\052\020\064\013\066\024\001\002" +
    "\000\024\035\uffef\037\uffef\043\uffef\046\uffef\047\uffef\050" +
    "\uffef\052\uffef\064\uffef\066\uffef\001\002\000\022\035\023" +
    "\037\014\046\012\047\022\050\027\052\020\064\013\066" +
    "\024\001\002\000\024\035\023\037\014\043\360\046\012" +
    "\047\022\050\027\052\020\064\013\066\024\001\002\000" +
    "\024\035\uffe3\037\uffe3\043\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\052\uffe3\064\uffe3\066\uffe3\001\002\000\016\030\054\032" +
    "\056\033\060\034\377\066\024\067\062\001\002\000\016" +
    "\030\054\032\056\033\060\034\363\066\024\067\062\001" +
    "\002\000\020\022\166\023\171\024\172\025\165\026\170" +
    "\027\167\040\374\001\002\000\004\040\371\001\002\000" +
    "\020\022\071\023\075\024\076\025\073\026\074\027\072" +
    "\040\366\001\002\000\022\035\023\037\014\046\012\047" +
    "\022\050\027\052\020\064\013\066\024\001\002\000\024" +
    "\035\023\037\014\043\370\046\012\047\022\050\027\052" +
    "\020\064\013\066\024\001\002\000\024\035\uffe5\037\uffe5" +
    "\043\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\064\uffe5\066" +
    "\uffe5\001\002\000\022\035\023\037\014\046\012\047\022" +
    "\050\027\052\020\064\013\066\024\001\002\000\024\035" +
    "\023\037\014\043\373\046\012\047\022\050\027\052\020" +
    "\064\013\066\024\001\002\000\024\035\uffdf\037\uffdf\043" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\064\uffdf\066\uffdf" +
    "\001\002\000\022\035\023\037\014\046\012\047\022\050" +
    "\027\052\020\064\013\066\024\001\002\000\024\035\023" +
    "\037\014\043\376\046\012\047\022\050\027\052\020\064" +
    "\013\066\024\001\002\000\024\035\uffe7\037\uffe7\043\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\052\uffe7\064\uffe7\066\uffe7\001" +
    "\002\000\020\022\166\023\171\024\172\025\165\026\170" +
    "\027\167\040\u0108\001\002\000\004\040\u0105\001\002\000" +
    "\020\022\071\023\075\024\076\025\073\026\074\027\072" +
    "\040\u0102\001\002\000\022\035\023\037\014\046\012\047" +
    "\022\050\027\052\020\064\013\066\024\001\002\000\024" +
    "\035\023\037\014\043\u0104\046\012\047\022\050\027\052" +
    "\020\064\013\066\024\001\002\000\024\035\uffee\037\uffee" +
    "\043\uffee\046\uffee\047\uffee\050\uffee\052\uffee\064\uffee\066" +
    "\uffee\001\002\000\022\035\023\037\014\046\012\047\022" +
    "\050\027\052\020\064\013\066\024\001\002\000\024\035" +
    "\023\037\014\043\u0107\046\012\047\022\050\027\052\020" +
    "\064\013\066\024\001\002\000\024\035\uffe2\037\uffe2\043" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\064\uffe2\066\uffe2" +
    "\001\002\000\022\035\023\037\014\046\012\047\022\050" +
    "\027\052\020\064\013\066\024\001\002\000\024\035\023" +
    "\037\014\043\u010a\046\012\047\022\050\027\052\020\064" +
    "\013\066\024\001\002\000\024\035\uffec\037\uffec\043\uffec" +
    "\046\uffec\047\uffec\050\uffec\052\uffec\064\uffec\066\uffec\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\025\003\016\005\020\006\014\007" +
    "\024\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\060\010\056\001\001\000" +
    "\002\001\001\000\014\002\025\003\050\005\020\006\014" +
    "\012\051\001\001\000\004\005\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\066\001\001" +
    "\000\004\005\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\115" +
    "\001\001\000\004\005\111\001\001\000\004\005\106\001" +
    "\001\000\004\005\104\001\001\000\004\005\101\001\001" +
    "\000\004\005\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\144\001\001\000\004" +
    "\005\141\001\001\000\004\005\136\001\001\000\004\005" +
    "\133\001\001\000\004\005\131\001\001\000\004\005\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\025" +
    "\003\016\005\020\006\014\007\147\012\015\001\001\000" +
    "\014\002\025\003\050\005\020\006\014\012\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\025\003\016\005\020\006\014\007\154\012\015" +
    "\001\001\000\014\002\025\003\050\005\020\006\014\012" +
    "\051\001\001\000\002\001\001\000\004\005\163\001\001" +
    "\000\004\005\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\213\013\215" +
    "\014\212\015\216\017\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\227\013\236\014\212\015\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\227\014\231\001\001" +
    "\000\006\005\227\014\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\227\014\212" +
    "\015\235\001\001\000\010\005\227\014\212\015\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\247\017\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\311\010\307\001\001\000\006\005\271" +
    "\010\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\025\003\016" +
    "\005\020\006\014\007\273\012\015\001\001\000\014\002" +
    "\025\003\050\005\020\006\014\012\051\001\001\000\002" +
    "\001\001\000\016\002\025\003\016\005\020\006\014\007" +
    "\276\012\015\001\001\000\014\002\025\003\050\005\020" +
    "\006\014\012\051\001\001\000\002\001\001\000\016\002" +
    "\025\003\016\005\020\006\014\007\301\012\015\001\001" +
    "\000\014\002\025\003\050\005\020\006\014\012\051\001" +
    "\001\000\002\001\001\000\016\002\025\003\016\005\020" +
    "\006\014\007\304\012\015\001\001\000\014\002\025\003" +
    "\050\005\020\006\014\012\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\025\003\016\005\020\006\014" +
    "\007\313\012\015\001\001\000\014\002\025\003\050\005" +
    "\020\006\014\012\051\001\001\000\002\001\001\000\016" +
    "\002\025\003\016\005\020\006\014\007\316\012\015\001" +
    "\001\000\014\002\025\003\050\005\020\006\014\012\051" +
    "\001\001\000\002\001\001\000\016\002\025\003\016\005" +
    "\020\006\014\007\321\012\015\001\001\000\014\002\025" +
    "\003\050\005\020\006\014\012\051\001\001\000\002\001" +
    "\001\000\016\002\025\003\016\005\020\006\014\007\324" +
    "\012\015\001\001\000\014\002\025\003\050\005\020\006" +
    "\014\012\051\001\001\000\002\001\001\000\006\005\346" +
    "\010\344\001\001\000\006\005\332\010\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\025\003\016\005\020\006\014\007\334\012\015\001" +
    "\001\000\014\002\025\003\050\005\020\006\014\012\051" +
    "\001\001\000\002\001\001\000\016\002\025\003\016\005" +
    "\020\006\014\007\337\012\015\001\001\000\014\002\025" +
    "\003\050\005\020\006\014\012\051\001\001\000\002\001" +
    "\001\000\016\002\025\003\016\005\020\006\014\007\342" +
    "\012\015\001\001\000\014\002\025\003\050\005\020\006" +
    "\014\012\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\025\003" +
    "\016\005\020\006\014\007\350\012\015\001\001\000\014" +
    "\002\025\003\050\005\020\006\014\012\051\001\001\000" +
    "\002\001\001\000\016\002\025\003\016\005\020\006\014" +
    "\007\353\012\015\001\001\000\014\002\025\003\050\005" +
    "\020\006\014\012\051\001\001\000\002\001\001\000\016" +
    "\002\025\003\016\005\020\006\014\007\356\012\015\001" +
    "\001\000\014\002\025\003\050\005\020\006\014\012\051" +
    "\001\001\000\002\001\001\000\006\005\u0100\010\377\001" +
    "\001\000\006\005\364\010\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\025\003" +
    "\016\005\020\006\014\007\366\012\015\001\001\000\014" +
    "\002\025\003\050\005\020\006\014\012\051\001\001\000" +
    "\002\001\001\000\016\002\025\003\016\005\020\006\014" +
    "\007\371\012\015\001\001\000\014\002\025\003\050\005" +
    "\020\006\014\012\051\001\001\000\002\001\001\000\016" +
    "\002\025\003\016\005\020\006\014\007\374\012\015\001" +
    "\001\000\014\002\025\003\050\005\020\006\014\012\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\025\003\016\005\020" +
    "\006\014\007\u0102\012\015\001\001\000\014\002\025\003" +
    "\050\005\020\006\014\012\051\001\001\000\002\001\001" +
    "\000\016\002\025\003\016\005\020\006\014\007\u0105\012" +
    "\015\001\001\000\014\002\025\003\050\005\020\006\014" +
    "\012\051\001\001\000\002\001\001\000\016\002\025\003" +
    "\016\005\020\006\014\007\u0108\012\015\001\001\000\014" +
    "\002\025\003\050\005\020\006\014\012\051\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // concat ::= concat PUNTO ident 
            {
              PTConcat RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTConcat c = (PTConcat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTConcat(a,c,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // concat ::= concat PUNTO CADENA 
            {
              PTConcat RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTConcat c = (PTConcat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTConcat(a,c,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // concat ::= ident PUNTO CADENA 
            {
              PTConcat RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTConcat(b,a,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // concat ::= CADENA PUNTO ident 
            {
              PTConcat RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTConcat(a,b,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // concat ::= CADENA PUNTO CADENA 
            {
              PTConcat RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTConcat(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // concat ::= ident PUNTO ident 
            {
              PTConcat RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTConcat(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // booleanExp ::= ENTEROS MAYIGU ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // booleanExp ::= ENTEROS MENIGU ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // booleanExp ::= ENTEROS MENQ ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // booleanExp ::= ENTEROS MAYQ ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // booleanExp ::= ENTEROS DIF ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // booleanExp ::= ENTEROS IGU ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // booleanExp ::= CADENA DIF ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // booleanExp ::= CADENA IGU ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // booleanExp ::= BOLEANOS DIF ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // booleanExp ::= BOLEANOS IGU ident 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // booleanExp ::= NOT BOLEANOS 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTBoolExpresion(!b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // booleanExp ::= BOLEANOS 
            {
              PTBoolExpresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTBoolExpresion(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // booleanExp ::= FLOTANTES MAYIGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // booleanExp ::= FLOTANTES MENIGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // booleanExp ::= FLOTANTES MENQ ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // booleanExp ::= FLOTANTES MAYQ ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // booleanExp ::= FLOTANTES DIF ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // booleanExp ::= FLOTANTES IGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // booleanExp ::= ENTEROS MAYIGU FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // booleanExp ::= ENTEROS MENIGU FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // booleanExp ::= ENTEROS MENQ FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // booleanExp ::= ENTEROS MAYQ FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // booleanExp ::= ENTEROS DIF FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // booleanExp ::= ENTEROS IGU FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // booleanExp ::= FLOTANTES MAYIGU FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // booleanExp ::= FLOTANTES MENIGU FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // booleanExp ::= FLOTANTES MENQ FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // booleanExp ::= FLOTANTES MAYQ FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // booleanExp ::= FLOTANTES DIF FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // booleanExp ::= FLOTANTES IGU FLOTANTES 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // booleanExp ::= ENTEROS MAYIGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // booleanExp ::= ENTEROS MENIGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // booleanExp ::= ENTEROS MENQ ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // booleanExp ::= ENTEROS MAYQ ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // booleanExp ::= ENTEROS DIF ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // booleanExp ::= ENTEROS IGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // booleanExp ::= CADENA DIF CADENA 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanExp ::= CADENA IGU CADENA 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // booleanExp ::= BOLEANOS DIF BOLEANOS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // booleanExp ::= BOLEANOS IGU BOLEANOS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // booleanExp ::= ident MAYIGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // booleanExp ::= ident MENIGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // booleanExp ::= ident MENQ ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // booleanExp ::= ident MAYQ ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // booleanExp ::= ident DIF ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // booleanExp ::= ident IGU ENTEROS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // booleanExp ::= ident DIF CADENA 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // booleanExp ::= ident IGU CADENA 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // booleanExp ::= ident DIF BOLEANOS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // booleanExp ::= ident IGU BOLEANOS 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // booleanExp ::= ident MAYIGU ident 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'#'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // booleanExp ::= ident MENIGU ident 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'~'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // booleanExp ::= ident MENQ ident 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'<'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // booleanExp ::= ident MAYQ ident 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'>'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // booleanExp ::= ident DIF ident 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'!'); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // booleanExp ::= ident IGU ident 
            {
              PTBoolExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=  new PTBoolExpresion(a,b,'='); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asigatob ::= ident ASIG concat 
            {
              AsigAtoB RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTConcat c = (PTConcat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new AsigAtoB(a,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigatob",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asigatob ::= ident ASIG operacionesAritmeticas 
            {
              AsigAtoB RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic o = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new AsigAtoB(a,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigatob",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asigatob ::= ident ASIG BOLEANOS 
            {
              AsigAtoB RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new AsigAtoB(a,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigatob",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asigatob ::= ident ASIG CADENA 
            {
              AsigAtoB RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new AsigAtoB(a,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigatob",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // impr ::= PRINTFN PDERECHO concat PIZQUIERDO PCOMA 
            {
              PTPrintfn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTConcat e = (PTConcat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new PTPrintfn(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // impr ::= PRINTFN PDERECHO ident PIZQUIERDO PCOMA 
            {
              PTPrintfn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTIdent e = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new PTPrintfn(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // impr ::= PRINTFN PDERECHO CADENA PIZQUIERDO PCOMA 
            {
              PTPrintfn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new PTPrintfn(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ident ::= ID 
            {
              PTIdent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new PTIdent(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= BOOL 
            {
              Simbolo.TipoSimbolo RESULT =null;
		 RESULT=Simbolo.TipoSimbolo.Booleano; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= STRING 
            {
              Simbolo.TipoSimbolo RESULT =null;
		 RESULT=Simbolo.TipoSimbolo.Cadena; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= FLOAT 
            {
              Simbolo.TipoSimbolo RESULT =null;
		 RESULT=Simbolo.TipoSimbolo.Flotante; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= INT 
            {
              Simbolo.TipoSimbolo RESULT =null;
		RESULT= Simbolo.TipoSimbolo.Entero; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacionesAritmeticas ::= factor 
            {
              PTAritmetic RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic f = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(0,f,'+');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesAritmeticas",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacionesAritmeticas ::= operacionesAritmeticas REST factor 
            {
              PTAritmetic RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTAritmetic e = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic f = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(e,f,'-');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesAritmeticas",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacionesAritmeticas ::= operacionesAritmeticas SUM factor 
            {
              PTAritmetic RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTAritmetic e = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic f = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(e,f,'+');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesAritmeticas",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= factor DIV termino 
            {
              PTAritmetic RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTAritmetic f = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic t = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(f,t,'/');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= factor MULT termino 
            {
              PTAritmetic RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PTAritmetic f = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic t = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(f,t,'*');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= termino 
            {
              PTAritmetic RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTAritmetic a = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(0,a,'+');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= PDERECHO operacionesAritmeticas PIZQUIERDO 
            {
              PTAritmetic RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTAritmetic d = (PTAritmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTAritmetic(0,d,'+');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= FLOTANTES 
            {
              PTAritmetic RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(a,'#');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termino ::= ENTEROS 
            {
              PTAritmetic RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(a,'#');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // termino ::= ident 
            {
              PTAritmetic RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTAritmetic(a,'#');
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // leer ::= READLN PDERECHO CADENA PIZQUIERDO 
            {
              PTReadLn RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTReadLn(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exo ::= tipo ident ASIG leer PCOMA 
            {
              PTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo.TipoSimbolo t = (Simbolo.TipoSimbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTReadLn l = (PTReadLn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             if(t==Simbolo.TipoSimbolo.Flotante)RESULT= new SymFloat(aleft,aright,a.getNombre(),l); 
             if(t==Simbolo.TipoSimbolo.Entero)RESULT=new SymInt(aleft,aright,a.getNombre(),l);
             if(t==Simbolo.TipoSimbolo.Cadena)RESULT=new SymString(aleft,aright,a.getNombre(),l);
             if(t==Simbolo.TipoSimbolo.Booleano)RESULT=new SymBoolean(aleft,aright,a.getNombre(),l);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exo ::= FOR FLOTANTES DOWNTO booleanExp DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float i = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion b = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exo ::= FOR ENTEROS DOWNTO booleanExp DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion b = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exo ::= FOR ident DOWNTO booleanExp DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion b = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exo ::= FOR FLOTANTES TO booleanExp DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float i = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion b = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exo ::= FOR ENTEROS TO booleanExp DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion b = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exo ::= FOR ident TO booleanExp DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion b = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exo ::= FOR FLOTANTES DOWNTO ident DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float i = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exo ::= FOR ENTEROS DOWNTO ident DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exo ::= FOR FLOTANTES DOWNTO FLOTANTES DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float i = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exo ::= FOR ENTEROS DOWNTO ENTEROS DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exo ::= FOR ident DOWNTO FLOTANTES DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exo ::= FOR ident DOWNTO ENTEROS DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exo ::= FOR ident DOWNTO ident DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exo ::= FOR FLOTANTES TO FLOTANTES DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float i = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exo ::= FOR ENTEROS TO ident DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exo ::= FOR FLOTANTES TO ident DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float i = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(e,b,i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exo ::= FOR ENTEROS TO ENTEROS DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exo ::= FOR ident TO FLOTANTES DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exo ::= FOR ident TO ENTEROS DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exo ::= FOR ident TO ident DO expresiones END 
            {
              PTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PTIdent i = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent b = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTForExpresion(i,b,e,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exo ::= tipo ident ASIG BOLEANOS PCOMA 
            {
              PTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo.TipoSimbolo t = (Simbolo.TipoSimbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(t==Simbolo.TipoSimbolo.Booleano)RESULT=new SymBoolean(d,aleft,aright,a.getNombre());
                        else throw new Exception("Error de sintaxis .Solo se puede asignar booleanos a esta variable. Linea: "+aleft+" Columna: "+aright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exo ::= tipo ident ASIG CADENA PCOMA 
            {
              PTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo.TipoSimbolo t = (Simbolo.TipoSimbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(t==Simbolo.TipoSimbolo.Cadena)RESULT=new SymString(d,aleft,aright,a.getNombre());
                        else throw new Exception("Error de sintaxis .Solo se puede asignar cadenas de caracteres a esta variable. Linea: "+aleft+" Columna: "+aright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exo ::= tipo ident ASIG FLOTANTES PCOMA 
            {
              PTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo.TipoSimbolo t = (Simbolo.TipoSimbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(t==Simbolo.TipoSimbolo.Flotante)RESULT= new SymFloat(d,aleft,aright,a.getNombre()); 
                        if(t==Simbolo.TipoSimbolo.Entero)RESULT=new SymInt(Integer.parseInt(d.toString()),aleft,aright,a.getNombre());
                        if(t==Simbolo.TipoSimbolo.Cadena)RESULT=new SymString(d.toString(),aleft,aright,a.getNombre());
                        if(t==Simbolo.TipoSimbolo.Booleano)throw new Exception("Error de sintaxis .No se puede asignar valores flotantes a una variable booleana. Linea: "+aleft+" Columna: "+aright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exo ::= tipo ident ASIG ENTEROS PCOMA 
            {
              PTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo.TipoSimbolo t = (Simbolo.TipoSimbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        if(t==Simbolo.TipoSimbolo.Flotante)RESULT= new SymFloat(Float.parseFloat(d.toString()),aleft,aright,a.getNombre()); 
                        if(t==Simbolo.TipoSimbolo.Entero)RESULT=new SymInt(d,aleft,aright,a.getNombre());
                        if(t==Simbolo.TipoSimbolo.Cadena)RESULT=new SymString(d.toString(),aleft,aright,a.getNombre());
                        if(t==Simbolo.TipoSimbolo.Booleano)throw new Exception("Error de sintaxis .No se puede asignar valores enteros a una variable boobleana. Linea: "+aleft+" Columna: "+aright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exo ::= tipo ident PCOMA 
            {
              PTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo.TipoSimbolo t = (Simbolo.TipoSimbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTIdent a = (PTIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        if(t==Simbolo.TipoSimbolo.Flotante)RESULT= new SymFloat(aleft,aright,a.getNombre()); 
                        if(t==Simbolo.TipoSimbolo.Entero)RESULT=new SymInt(aleft,aright,a.getNombre());
                        if(t==Simbolo.TipoSimbolo.Cadena)RESULT=new SymString(aleft,aright,a.getNombre());
                        if(t==Simbolo.TipoSimbolo.Booleano)RESULT=new SymBoolean(aleft,aright,a.getNombre());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exo ::= IF booleanExp THEN BEGIN END 
            {
              PTExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion a = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exo ::= IF booleanExp THEN expresiones END ELSE expresiones END 
            {
              PTExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		PTBoolExpresion a = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList w = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTIFExpresion(a,e,w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exo ::= IF booleanExp THEN expresiones END 
            {
              PTExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PTBoolExpresion a = (PTBoolExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PTIFExpresion(a,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exo ::= asigatob PCOMA 
            {
              PTExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsigAtoB a = (AsigAtoB)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= impr 
            {
              PTexpList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTPrintfn p = (PTPrintfn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTexpList(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= expresiones impr 
            {
              PTexpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList l = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTPrintfn p = (PTPrintfn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTexpList(p,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresiones ::= expresiones exo 
            {
              PTexpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList l = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTExp e = (PTExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PTexpList(e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= exo 
            {
              PTexpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTExp e = (PTExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new PTexpList(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= mainfuncion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymFunction start_val = (SymFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // mainfuncion ::= FUNCTION STARTFN PDERECHO PIZQUIERDO BEGIN expresiones END 
            {
              SymFunction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PTexpList e = (PTexpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new SymFunction("main",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainfuncion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

