/* The following code was generated by JFlex 1.4.3 on 06-17-12 11:46 PM */

package PTLex;
import PTSintax.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06-17-12 11:46 PM from the specification file
 * <tt>PTSCRIPT.flex</tt>
 */
public class PTLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIOS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  5,  0,  6,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  0,  8,  0,  0,  0,  0,  0, 21, 22, 10, 13,  0, 14, 12,  9, 
     2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0, 38, 24, 39, 23,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  7,  0,  0, 11, 
     0, 27, 34, 36, 33, 19, 16, 35, 18, 15,  1,  1, 28,  1, 20, 30, 
    37, 25, 31, 29, 17, 26,  1, 32,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\5\3\1\12\1\13\1\14\1\15"+
    "\10\3\1\16\1\17\1\1\2\2\2\0\1\5\1\20"+
    "\1\21\1\22\6\3\1\23\13\3\1\24\3\3\2\0"+
    "\1\1\1\25\1\26\1\1\1\27\1\0\1\5\1\20"+
    "\1\30\3\3\1\31\2\3\1\32\2\3\1\33\1\34"+
    "\15\3\1\35\1\36\1\3\1\37\10\3\1\40\2\3"+
    "\1\41\1\42\5\3\1\43\2\3\1\44\2\3\1\45"+
    "\1\3\1\46\1\47\1\50\1\3\1\51\2\3\1\52"+
    "\1\53\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\120"+
    "\0\u0118\0\u0140\0\120\0\120\0\120\0\u0168\0\u0190\0\u01b8"+
    "\0\u01e0\0\u0208\0\120\0\120\0\120\0\120\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\120\0\120"+
    "\0\u0370\0\u0398\0\u03c0\0\240\0\u03e8\0\u0410\0\120\0\120"+
    "\0\170\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\170"+
    "\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u07a8\0\u07d0\0\120\0\120\0\u07f8\0\u03e8\0\u0820\0\u0848"+
    "\0\u0118\0\170\0\u0870\0\u0898\0\u08c0\0\170\0\u08e8\0\u0910"+
    "\0\170\0\u0938\0\u0960\0\170\0\170\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18"+
    "\0\u0b40\0\u0b68\0\170\0\170\0\u0b90\0\170\0\u0bb8\0\u0be0"+
    "\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\170\0\u0cf8"+
    "\0\u0d20\0\170\0\170\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8"+
    "\0\170\0\u0e10\0\u0e38\0\170\0\u0e60\0\u0e88\0\170\0\u0eb0"+
    "\0\170\0\170\0\170\0\u0ed8\0\170\0\u0f00\0\u0f28\0\170"+
    "\0\170\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\2\10\1\3\1\11"+
    "\1\12\1\13\2\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\4\1\21\1\22\1\23\1\24\1\25\1\26\3\4"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\34\1\4"+
    "\1\35\1\36\1\37\1\40\5\41\1\0\3\41\1\42"+
    "\1\43\35\41\51\0\3\4\7\0\1\4\3\0\6\4"+
    "\4\0\15\4\4\0\2\44\10\0\1\45\35\0\2\6"+
    "\10\0\1\45\40\0\1\10\42\0\4\11\2\0\1\11"+
    "\1\46\1\47\37\11\12\0\1\50\36\0\3\4\7\0"+
    "\1\4\3\0\1\4\1\51\3\4\1\52\4\0\15\4"+
    "\3\0\3\4\7\0\1\4\3\0\6\4\4\0\1\4"+
    "\1\53\1\54\1\55\1\4\1\56\7\4\3\0\3\4"+
    "\7\0\1\4\3\0\3\4\1\57\2\4\4\0\5\4"+
    "\1\60\1\61\6\4\3\0\3\4\7\0\1\4\3\0"+
    "\5\4\1\62\4\0\1\63\2\4\1\64\11\4\3\0"+
    "\3\4\7\0\1\4\3\0\6\4\4\0\5\4\1\65"+
    "\7\4\3\0\3\4\7\0\1\4\3\0\4\4\1\66"+
    "\1\4\4\0\15\4\3\0\3\4\7\0\1\4\3\0"+
    "\2\4\1\67\3\4\4\0\7\4\1\70\5\4\3\0"+
    "\3\4\7\0\1\4\3\0\4\4\1\71\1\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\3\4\1\72"+
    "\2\4\4\0\15\4\3\0\3\4\7\0\1\4\3\0"+
    "\4\4\1\73\1\4\4\0\5\4\1\74\7\4\3\0"+
    "\3\4\7\0\1\4\3\0\4\4\1\75\1\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\6\4\4\0"+
    "\2\4\1\76\12\4\3\0\3\4\7\0\1\4\3\0"+
    "\6\4\4\0\6\4\1\77\6\4\2\0\5\41\1\0"+
    "\3\41\1\100\1\101\42\41\1\0\3\41\1\102\1\103"+
    "\42\41\1\0\3\41\1\104\1\105\35\41\2\0\2\106"+
    "\44\0\4\11\2\107\1\110\1\46\1\111\37\11\1\0"+
    "\3\4\7\0\1\4\3\0\2\4\1\112\3\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\5\4\1\113"+
    "\4\0\15\4\3\0\3\4\7\0\1\4\3\0\6\4"+
    "\4\0\3\4\1\114\11\4\3\0\3\4\7\0\1\4"+
    "\3\0\6\4\4\0\5\4\1\115\7\4\3\0\3\4"+
    "\7\0\1\4\3\0\6\4\4\0\6\4\1\116\6\4"+
    "\3\0\3\4\7\0\1\4\3\0\4\4\1\117\1\4"+
    "\4\0\15\4\3\0\3\4\7\0\1\4\3\0\6\4"+
    "\4\0\1\4\1\120\13\4\3\0\3\4\7\0\1\4"+
    "\3\0\6\4\4\0\10\4\1\121\4\4\3\0\3\4"+
    "\7\0\1\4\3\0\6\4\4\0\1\4\1\122\13\4"+
    "\3\0\3\4\7\0\1\4\3\0\6\4\4\0\4\4"+
    "\1\123\10\4\3\0\3\4\7\0\1\4\3\0\2\4"+
    "\1\124\3\4\4\0\15\4\3\0\3\4\7\0\1\4"+
    "\3\0\2\4\1\125\3\4\4\0\15\4\3\0\3\4"+
    "\7\0\1\4\3\0\6\4\4\0\2\4\1\126\3\4"+
    "\1\127\6\4\3\0\3\4\7\0\1\4\3\0\1\130"+
    "\5\4\4\0\15\4\3\0\3\4\7\0\1\4\3\0"+
    "\2\4\1\131\3\4\4\0\15\4\3\0\3\4\7\0"+
    "\1\4\3\0\1\132\5\4\4\0\15\4\3\0\3\4"+
    "\7\0\1\4\3\0\1\4\1\133\4\4\4\0\15\4"+
    "\3\0\3\4\7\0\1\4\3\0\6\4\4\0\7\4"+
    "\1\134\5\4\3\0\3\4\7\0\1\4\3\0\6\4"+
    "\4\0\12\4\1\135\2\4\3\0\3\4\7\0\1\4"+
    "\3\0\6\4\4\0\4\4\1\136\10\4\3\0\3\4"+
    "\7\0\1\4\3\0\1\137\5\4\4\0\15\4\2\0"+
    "\5\41\1\0\3\41\1\102\1\0\42\41\1\0\3\41"+
    "\1\0\1\105\42\41\1\0\3\41\1\102\1\101\42\41"+
    "\1\0\3\41\1\100\1\105\35\41\4\0\3\107\1\11"+
    "\40\0\4\11\2\107\1\110\1\46\1\47\37\11\1\0"+
    "\3\4\7\0\1\4\3\0\6\4\4\0\13\4\1\140"+
    "\1\4\3\0\3\4\7\0\1\4\3\0\6\4\4\0"+
    "\4\4\1\141\10\4\3\0\3\4\7\0\1\4\3\0"+
    "\6\4\4\0\2\4\1\142\12\4\3\0\3\4\7\0"+
    "\1\4\3\0\5\4\1\143\4\0\15\4\3\0\3\4"+
    "\7\0\1\4\3\0\4\4\1\144\1\4\4\0\15\4"+
    "\3\0\3\4\7\0\1\4\3\0\6\4\4\0\2\4"+
    "\1\145\12\4\3\0\3\4\7\0\1\4\3\0\4\4"+
    "\1\146\1\4\4\0\15\4\3\0\3\4\7\0\1\4"+
    "\3\0\6\4\4\0\6\4\1\147\6\4\3\0\3\4"+
    "\7\0\1\4\3\0\1\150\5\4\4\0\15\4\3\0"+
    "\3\4\7\0\1\4\3\0\2\4\1\151\3\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\6\4\4\0"+
    "\1\4\1\152\13\4\3\0\3\4\7\0\1\4\3\0"+
    "\6\4\4\0\3\4\1\153\11\4\3\0\3\4\7\0"+
    "\1\4\3\0\6\4\4\0\2\4\1\154\12\4\3\0"+
    "\3\4\7\0\1\4\3\0\5\4\1\155\4\0\15\4"+
    "\3\0\3\4\7\0\1\4\3\0\1\156\5\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\4\4\1\157"+
    "\1\4\4\0\15\4\3\0\3\4\7\0\1\4\3\0"+
    "\5\4\1\160\4\0\15\4\3\0\3\4\7\0\1\4"+
    "\3\0\2\4\1\161\3\4\4\0\15\4\3\0\3\4"+
    "\7\0\1\4\3\0\4\4\1\162\1\4\4\0\15\4"+
    "\3\0\3\4\7\0\1\4\3\0\2\4\1\163\3\4"+
    "\4\0\15\4\3\0\3\4\7\0\1\4\3\0\6\4"+
    "\4\0\3\4\1\164\11\4\3\0\3\4\7\0\1\4"+
    "\3\0\2\4\1\165\3\4\4\0\15\4\3\0\3\4"+
    "\7\0\1\4\3\0\5\4\1\166\4\0\15\4\3\0"+
    "\3\4\7\0\1\4\3\0\6\4\4\0\13\4\1\167"+
    "\1\4\3\0\3\4\7\0\1\4\3\0\6\4\4\0"+
    "\6\4\1\170\6\4\3\0\3\4\7\0\1\4\3\0"+
    "\4\4\1\171\1\4\4\0\15\4\3\0\3\4\7\0"+
    "\1\4\3\0\6\4\4\0\1\4\1\172\13\4\3\0"+
    "\3\4\7\0\1\4\3\0\2\4\1\173\3\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\5\4\1\174"+
    "\4\0\15\4\3\0\3\4\7\0\1\4\3\0\2\4"+
    "\1\175\3\4\4\0\15\4\3\0\3\4\7\0\1\4"+
    "\3\0\1\176\5\4\4\0\15\4\3\0\3\4\7\0"+
    "\1\4\3\0\6\4\4\0\4\4\1\177\10\4\3\0"+
    "\3\4\7\0\1\4\3\0\1\4\1\200\4\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\6\4\4\0"+
    "\12\4\1\201\2\4\3\0\3\4\7\0\1\4\3\0"+
    "\3\4\1\202\2\4\4\0\15\4\3\0\3\4\7\0"+
    "\1\4\3\0\5\4\1\203\4\0\15\4\3\0\3\4"+
    "\7\0\1\4\3\0\6\4\4\0\3\4\1\204\11\4"+
    "\3\0\3\4\7\0\1\4\3\0\6\4\4\0\5\4"+
    "\1\205\7\4\3\0\3\4\7\0\1\4\3\0\1\4"+
    "\1\206\4\4\4\0\15\4\3\0\3\4\7\0\1\4"+
    "\3\0\6\4\4\0\5\4\1\207\7\4\3\0\3\4"+
    "\7\0\1\4\3\0\5\4\1\210\4\0\15\4\3\0"+
    "\3\4\7\0\1\4\3\0\2\4\1\211\3\4\4\0"+
    "\15\4\3\0\3\4\7\0\1\4\3\0\5\4\1\212"+
    "\4\0\15\4\3\0\3\4\7\0\1\4\3\0\5\4"+
    "\1\213\4\0\15\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\4\1\1\11\2\1\3\11\5\1"+
    "\4\11\10\1\2\11\3\1\2\0\1\1\2\11\27\1"+
    "\2\0\1\1\2\11\2\1\1\0\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;

	private Symbol symbol(int type) {
	        return new Symbol(type);
    	}

         private Symbol symbol(int type,int l, int r) {
        	return new Symbol(type,l,r);
    	}
	 private Symbol symbol(int type,int l, int r, Object value) {
        	return new Symbol(type,l,r, value);
    	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PTLexer(java.io.Reader in) {
  	//TablaDeSimbolos.GetInstance();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PTLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return symbol(sym.CADENA,yyline,yycolumn,yytext());
          }
        case 46: break;
        case 17: 
          { yybegin(COMENTARIOS); comment_count++;
          }
        case 47: break;
        case 43: 
          { return symbol(sym.DEFAULT,yyline,yycolumn);
          }
        case 48: break;
        case 4: 
          { return symbol(sym.ENTEROS,yyline,yycolumn,Integer.parseInt(yytext()));
          }
        case 49: break;
        case 45: 
          { return symbol(sym.FUNCTION,yyline,yycolumn);
          }
        case 50: break;
        case 13: 
          { return symbol(sym.MENQ,yyline,yycolumn);
          }
        case 51: break;
        case 18: 
          { return symbol( sym.IF,yyline,yycolumn);
          }
        case 52: break;
        case 35: 
          { return symbol(sym.WHILE,yyline,yycolumn);
          }
        case 53: break;
        case 6: 
          { return symbol(sym.DIV,yyline,yycolumn);
          }
        case 54: break;
        case 39: 
          { return symbol(sym.SWITCH,yyline,yycolumn);
          }
        case 55: break;
        case 21: 
          { comment_count++;
          }
        case 56: break;
        case 36: 
          { return symbol(sym.BEGIN,yyline,yycolumn);
          }
        case 57: break;
        case 24: 
          { return symbol(sym.INT,yyline,yycolumn);
          }
        case 58: break;
        case 30: 
          { return symbol(sym.BOLEANOS,yyline,yycolumn,true);
          }
        case 59: break;
        case 41: 
          { return symbol(sym.DOWNTO,yyline,yycolumn);
          }
        case 60: break;
        case 25: 
          { return symbol(sym.FOR,yyline,yycolumn);
          }
        case 61: break;
        case 11: 
          { return symbol( sym.PIZQUIERDO,yyline,yycolumn);
          }
        case 62: break;
        case 23: 
          { return symbol(sym.FLOTANTES,yyline,yycolumn,Float.parseFloat(yytext()));
          }
        case 63: break;
        case 44: 
          { return symbol(sym.PRINTFN,yyline,yycolumn);
          }
        case 64: break;
        case 2: 
          { System.out.println("Error: <" + yytext() + ">");
          }
        case 65: break;
        case 20: 
          { return symbol(sym.DO,yyline,yycolumn);
          }
        case 66: break;
        case 34: 
          { return symbol(sym.FLOAT,yyline,yycolumn);
          }
        case 67: break;
        case 42: 
          { return symbol(sym.STARTFN,yyline,yycolumn);
          }
        case 68: break;
        case 33: 
          { return symbol(sym.BOLEANOS,yyline,yycolumn,false);
          }
        case 69: break;
        case 37: 
          { return symbol(sym.IGU,yyline,yycolumn);
          }
        case 70: break;
        case 9: 
          { return symbol(sym.REST,yyline,yycolumn);
          }
        case 71: break;
        case 19: 
          { return symbol(sym.TO,yyline,yycolumn);
          }
        case 72: break;
        case 14: 
          { return symbol(sym.PCOMA,yyline,yycolumn);
          }
        case 73: break;
        case 12: 
          { return symbol(sym.MAYQ,yyline,yycolumn);
          }
        case 74: break;
        case 10: 
          { return symbol( sym.PDERECHO,yyline,yycolumn);
          }
        case 75: break;
        case 29: 
          { return symbol( sym.THEN,yyline,yycolumn);
          }
        case 76: break;
        case 32: 
          { return symbol(sym.CASE,yyline,yycolumn);
          }
        case 77: break;
        case 26: 
          { return symbol(sym.END,yyline,yycolumn);
          }
        case 78: break;
        case 3: 
          { return symbol(sym.ID,yyline,yycolumn, yytext());
          }
        case 79: break;
        case 15: 
          { return symbol(sym.ASIG,yyline,yycolumn);
          }
        case 80: break;
        case 5: 
          { System.out.println("Cadena mal formada");
          }
        case 81: break;
        case 27: 
          { return symbol(sym.NOT,yyline,yycolumn);
          }
        case 82: break;
        case 7: 
          { return symbol(sym.MULT,yyline,yycolumn);
          }
        case 83: break;
        case 40: 
          { return symbol(sym.RETURN,yyline,yycolumn);
          }
        case 84: break;
        case 28: 
          { return symbol(sym.LET,yyline,yycolumn);
          }
        case 85: break;
        case 8: 
          { return symbol(sym.SUM,yyline,yycolumn);
          }
        case 86: break;
        case 38: 
          { return symbol(sym.STRING,yyline,yycolumn);
          }
        case 87: break;
        case 31: 
          { return symbol(sym.ELSE,yyline,yycolumn);
          }
        case 88: break;
        case 1: 
          { 
          }
        case 89: break;
        case 22: 
          { if(--comment_count==0)yybegin(YYINITIAL);
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
